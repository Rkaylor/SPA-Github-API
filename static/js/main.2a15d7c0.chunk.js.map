{"version":3,"sources":["components/ApiForm/ApiForm.jsx","components/UserCard/UserCard.jsx","components/Stats/Stats.jsx","App.js","serviceWorker.js","index.js"],"names":["ApiForm","onSubmit","onChange","className","action","type","placeholder","value","Usercard","name","avatar","following","followers","bio","onButton","src","alt","onClick","Stats","stats","map","stat","i","id","description","href","html_url","App","useState","userInput","setUserInput","setName","setAvatar","setFollowers","setFollowing","setBio","setStats","e","target","reset","preventDefault","fetch","then","res","status","json","data","login","avatar_url","setData","alert","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a15d7c0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ApiForm.css';\r\n\r\nfunction ApiForm({ onSubmit, onChange }) {\r\n    return (\r\n        <div className=\"form--input--container\">\r\n            <form action=\"input\" className=\"form--input\" onSubmit={onSubmit} >\r\n                <label>Find Github User</label><br></br>           \r\n                <input className=\"input--text\" type=\"text\" placeholder=\"Search\" onChange={onChange}/><br></br> \r\n                <input className=\"input--submit\" type=\"submit\" value=\"Submit\"  />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ApiForm\r\n","import React from 'react'\r\nimport './UserCard.css';\r\n\r\nfunction Usercard({ name, avatar, following, followers, bio, onButton }) {\r\n    return (\r\n        \r\n        <div>\r\n            <div className=\"div--card--container\">\r\n                <div className=\"div--header--container\">\r\n                    <img src={avatar} alt=\"Profile\" className=\"img--avatar\"/>\r\n                    <h4 className=\"h4--name\">{name}</h4>\r\n                </div>\r\n                <div className=\"div--text--container\">\r\n                    <p>Following: {following}</p>\r\n                    <p>Followers: {followers}</p>\r\n                    <p className=\"p--bio\">{bio}</p>\r\n                    <button onClick={onButton} className=\"button--stats\">Repositories</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Usercard\r\n","import React from 'react'\r\nimport './Stats.css';\r\n\r\n\r\nfunction Stats({ stats }) {\r\n    return (\r\n        <div>\r\n            <h3 className=\"h3--repositories\">Repositories</h3>\r\n            <div className=\"div--repo--container\">\r\n                {stats.map((stat, i) => {\r\n                return <div className=\"div--repo\" key={i}>\r\n                    <h4 id=\"repoName\">{stat.name}</h4>\r\n                    <p>{stat.description}</p>\r\n                    <a href={stat.html_url}>View Repository</a>\r\n                </div>})}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stats\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport ApiForm from './components/ApiForm/ApiForm'\r\nimport UserCard from './components/UserCard/UserCard'\r\nimport Stats from './components/Stats/Stats'\r\n\r\nfunction App() {\r\n\r\nconst [ userInput, setUserInput ] = useState('');\r\nconst [ name, setName ] = useState('');\r\nconst [ avatar, setAvatar ] = useState('');\r\nconst [ followers, setFollowers ] = useState('');\r\nconst [ following, setFollowing ] = useState('');\r\nconst [ bio, setBio ] = useState('');\r\nconst [ stats, setStats ] = useState([])\r\n\r\nconst setData = ({ login, avatar_url, followers, following, bio }) => {\r\n  setName(login);\r\n  setAvatar(avatar_url);\r\n  setFollowers(followers);\r\n  setFollowing(following);\r\n  setBio(bio);\r\n}\r\n\r\nconst handleSearch = (e) => {\r\n  setUserInput(e.target.value)\r\n}\r\n\r\nconst handleSubmit = (e) => {\r\n  setStats('')\r\n  e.target.reset();\r\n  e.preventDefault()\r\n  fetch(`https://api.github.com/users/${userInput}`)\r\n    .then(res => {\r\n      if (res.status === 200) {\r\n        res.json()\r\n        .then(data => setData(data))\r\n      } else {\r\n        alert(\"That user dosen't exist\")\r\n      }\r\n    })\r\n    \r\n    \r\n}\r\n\r\nconst handleButton = () => {\r\n  fetch(`https://api.github.com/users/${name}/repos`)\r\n    .then(res => res.json())\r\n    .then(data => setStats(data))\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"div--navbar--container\">\r\n        <div className=\"navbar\"></div>    \r\n        <ApiForm onSubmit={handleSubmit} onChange={handleSearch} />\r\n      </div>\r\n      {name.length !== 0 ?\r\n            <div className=\"div--content--container\">\r\n            <UserCard name={name} avatar={avatar} followers={followers} following={following} bio={bio} onButton={handleButton} />\r\n            {stats.length !== 0 ? <Stats stats={stats} /> : <div></div>}\r\n          </div> : <div></div>}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}